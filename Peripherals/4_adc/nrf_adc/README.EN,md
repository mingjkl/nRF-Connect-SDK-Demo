## Introduction
This example demonstrates the use of NRF5 SDK to collect ADC data. The collected ADC values are then converted into voltage values and logged to RTT.

## Steps
* Create a new Hello World project.
* Add the following configurations in `prj.conf`:
  ```
      CONFIG_LOG=y
      CONFIG_RTT_CONSOLE=y
      CONFIG_USE_SEGGER_RTT=y

      CONFIG_NRFX_SAADC=y
  ```
* Add the necessary headers in `main.c`:
  ```
      #include "zephyr/logging/log.h"
      #include "nrfx_saadc.h"
      #include <zephyr/kernel.h>
  ```
* Add ADC initialization function:
  ```
  int adc_init(void)
  {
      nrfx_err_t err;
      err = nrfx_saadc_init(NRFX_SAADC_DEFAULT_CONFIG_IRQ_PRIORITY);
      err = nrfx_saadc_channel_config(&single_channel);
      uint32_t channels_mask = nrfx_saadc_channels_configured_get();

      LOG_INF("ADC channels mask: %d\n", channels_mask);
      
      err = nrfx_saadc_simple_mode_set(channels_mask, NRF_SAADC_RESOLUTION_12BIT, NRF_SAADC_OVERSAMPLE_DISABLED, NULL);
      err = nrfx_saadc_buffer_set(buffer, CHANNEL_COUNT);
  }
  ```
  * `nrfx_saadc_init` is the initialization of the SAADC driver. The input parameter is the interrupt priority, and here the default priority is used.
  * `nrfx_saadc_channel_config` completes the channel configuration. We define a structure about channel configuration:
    ```
        static nrfx_saadc_channel_t single_channel = NRFX_SAADC_DEFAULT_CHANNEL_SE(NRF_SAADC_INPUT_AIN3, 0);
    ```
    This configuration is for single-ended mode, input channel is AIN3, gain is 1/6, reference voltage is 0.6V, and the input voltage range is 0~3.6V.

  * `nrfx_saadc_channels_configured_get();` records the currently configured channel settings.
  * `nrfx_saadc_simple_mode_set(channels_mask, NRF_SAADC_RESOLUTION_12BIT, NRF_SAADC_OVERSAMPLE_DISABLED, NULL)` sets the channel resolution to 12-bit, does not use oversampling, and no event callback.
  * `nrfx_saadc_buffer_set(buffer, CHANNEL_COUNT);` Before starting the SAADC conversion, you need to call this function to set a buffer where SAADC will store the sampling data.

  This completes the writing of the `adc_init` function.

* Add ADC collection function:
  ```
      int adc_value_get(void)
      {
          nrfx_err_t err;
          
          err = nrfx_saadc_offset_calibrate(NULL);
          err = nrfx_saadc_mode_trigger();
          return buffer[0];
      }
  ```
    * `nrfx_saadc_offset_calibrate(NULL);` calibrates the offset of the ADC. Here, no callback function is used.
    * `nrfx_saadc_mode_trigger();` starts data collection.
* Add ADC conversion function to convert ADC values to voltage:
  ```
      int adc_to_voltage(int adc_value)
      {
          return (adc_value * 3600) / 4096;
      }
  ```
* Implement ADC initialization, collection, conversion, and output in the main function:
  ```
      
      int main(void)
      {
          LOG_INF("ADC Demo %s\n", CONFIG_BOARD);
          adc_init();
          
          while (1)
          {
              LOG_INF("vol=%d\r\n", adc_to_voltage(adc_value_get()));
              k_msleep(10);
          }
          
          return 0;
      }

  ```
* Compile, download, and run the program. You will see the RTT outputting the voltage value collected by the ADC. In the code, the AIN3 channel is selected. The voltage value of AIN3 can be measured with an external voltmeter, and compared with the value outputted to RTT. You will find the values outputted by RTT are consistent with those measured by the external voltmeter.